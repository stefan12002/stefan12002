import java.io.*;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.Date;
import java.util.Scanner;
public class Main {
    public static void main(String[] args)
    {
        //scrieti un program Java pentru a verifica daca exista sau nu un fisier sau director specificat de calea de acces
        File MyFile = new File("D:\\Java citire si scriere\\exercitii recomandate\\");
        if (MyFile.exists()) {
            System.out.println("File exist");

        } else {
            System.out.println("file doesn't exist");
        }
        //Scrieti un program java pentru a verifica daca un fisier sau direcot are permisiunea de citire si scriere
        if (MyFile.canWrite()) {
            System.out.println("my file can be write");
        } else {
            System.out.println("cannot wrie");
        }
        if (MyFile.canRead()) {
            System.out.println("my file can be read");

        } else {
            System.out.println("cannot be read");
        }
        //scrieti un program java pentru a verifica daca calea data este un director sau un fisier
        if (MyFile.isDirectory()) {
            System.out.println("....");
        }
        if (MyFile.isFile()) {
            System.out.println("...");
        }
        //scrieti un program Java pentru a comapara lexicografic doua fisier(verificati daca cele 2 fisiere sunt exact la fel)
        String a = "Java";
        String b = "Java";
        String c = "JAVA1";
        int var1 = a.compareTo(b);
        System.out.println("comparare a si b" + var1);
        int var2 = a.compareTo(c);
        System.out.println("comparare a si c" + var2);
        //scrieti un program Java pentru a afla ultima modificare a unui fisier
        Date date = new Date(MyFile.lastModified());
        System.out.println(date);
//scrieti un program in java pentru a obtine dimensiunea fisierului in octeti
        if (MyFile.exists()) {
            System.out.println(filesize_in_Bytes(MyFile));
            System.out.println(filesize_in_kiloBytes(MyFile));
            System.out.println(filesize_in_megaBytes(MyFile));
        } else
            System.out.println("File doesn't exist");
        //scrieti un program JAva pentru a citi un cotinut de fisier linie cu linie
        BufferedReader br = null;
        String strLine = "";
        try {
            br = new BufferedReader(new FileReader(MyFile));
            while ((strLine = br.readLine()) != null) {
                System.out.println(strLine);
            }
            br.close();
        } catch (FileNotFoundException e) {
            System.err.println("File not found");
        } catch (IOException e) {
            System.err.println("Unable to read the file.");
        }
//scrieti un progam Java pentru a citi un fisier text
        StringBuilder sb = new StringBuilder();
        try {
            BufferedReader Br = new BufferedReader(new FileReader(MyFile));
            while (strLine != null) {
                sb.append(strLine);
                sb.append(System.lineSeparator());
                strLine = Br.readLine();
                System.out.println(strLine);
            }
            Br.close();
        } catch (FileNotFoundException e) {
            System.err.println("File not found");
        } catch (IOException e) {
            System.err.println("Unable to read the file.");
        }
//scrieti un program Java pentru a citi un fisier linie cu linie,iar paoi stocati l intr o variabila
        String strData = "";
        try {
            BufferedReader Br = new BufferedReader(new FileReader(MyFile));
            while (strLine != null) {
                if (strLine == null)
                    break;
                strData += strLine;
                strLine = Br.readLine();
            }
            System.out.println(strData);
            Br.close();
        } catch (FileNotFoundException e) {
            System.err.println("File not found");
        } catch (IOException e) {
            System.err.println("Unable to read the file.");

        }
        //Scrieti un program Java pentru a adauga text la un fisier existent
        try {
            String filename = "D:\\Java citire si scriere\\exercitii recomandate\\MyFile.txt";
            FileWriter fw = new FileWriter(filename, true);
//appends the string to the file
            fw.write("Java Exercises\\n");
            fw.close();
            BufferedReader Br = new BufferedReader(new FileReader(MyFile));
//read the file content
            while (strLine != null) {
                sb.append(strLine);
                sb.append(System.lineSeparator());
                strLine = Br.readLine();
                System.out.println(strLine);
            }
            Br.close();
        } catch (IOException ioe) {
            System.err.println("IOException: " + ioe.getMessage());
        }
        //Scrieti un program Java pentru a citi primele 3 randuri dintr un fisier
        try {
            LineNumberReader reader = new LineNumberReader(new InputStreamReader(new FileInputStream("D:\\Java citire si scriere\\exercitii recomandate\\test.txt"), "UTF-8"));
            while (((strLine = reader.readLine()) != null) && reader.getLineNumber() <= 3) {
                System.out.println(strLine);
            }
            reader.close();
        } catch (FileNotFoundException e) {
            System.err.println("File not found");
        } catch (IOException e) {
            System.err.println("Unable to read the file.");
        }
        //Scrieti un program Java pentru a gasi cel mai lung cuvant intr un fisier text
    }
        public String findLongestWords() throws FileNotFoundException {
            String longest_word = "";
            String current;
            Scanner sc = new Scanner(new File("D:\\Java citire si scriere\\exercitii recomandate\\test.txt"));
            while (sc.hasNext()) {
                current = sc.next();
                if (current.length() > longest_word.length()) {
                    longest_word = current;
                }
            }
            System.out.println("\\n"+longest_word+"\\n");
            return longest_word;

    }

        private static String filesize_in_megaBytes (File file){
            return (double) file.length() / (1024 * 1024) + " mb";
        }

        private static String filesize_in_kiloBytes (File file){
            return (double) file.length() / 1024 + " kb";
        }
        private static String filesize_in_Bytes (File file){
            return file.length() + " bytes";
        }

    }

